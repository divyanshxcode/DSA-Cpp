In C++, there are two primary ways to initialize an int (or any other basic type) with a value:

Direct Initialization: int a = 5;
Uniform Initialization (Brace Initialization): int a {5};

Consistency:

    Uniform Initialization {} ✅: Provides a consistent syntax for initializing variables, including aggregates like arrays and user-defined types. It reduces ambiguity and helps in avoiding some common pitfalls with initialization.
    
    Direct Initialization = ❌: Is more traditional and familiar, but it can be less consistent when dealing with different types of initializations.

Type Safety:

    Uniform Initialization {} ✅: Helps prevent narrowing conversions, where data might be truncated or lose precision. For example, int a {3.14}; would produce a compiler error because it involves narrowing conversion from double to int.
    
    Direct Initialization = ❌: May allow narrowing conversions without an error, which can sometimes lead to unexpected behavior or bugs.
    
Initialization of Aggregates:

    Uniform Initialization✅: Can be used to initialize aggregates such as arrays and structs in a consistent way. For example, int arr[] {1, 2, 3}; initializes an array with three elements.
    
    Direct Initialization = ❌: Generally used for simple scalar types and requires additional syntax for aggregates.
